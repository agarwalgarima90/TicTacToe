=======================
Explaination of Program
=======================

The TicTacToe program has three different workflows

#. Manual user input based game - where the computer's move is calculated by the ComputerPlayer.

#. Simulation Based game - where we can specify the moves of the Human in a json file and the Game will play accordingly. This is very useful in finding the game results for a predefined set of moves

#. Testing - where I have used Junit based testing to test if the computerâs calculation of moves is correct.

#. Apart from this - the javadoc documentation be generated by driver.sh -t

=========================================
Optimize function GameBoard: checkIfWon()
=========================================

Current Algorithms Problem
==========================

Current implementation of checkIfWon() is checking all the rows and the columns
for a common mark. This leads to checking the whole board whereas we should
only be checking if the last move was a winning move.

Suggested Algorithm
===================

Suppose if a user marks the 5,4 cell of a 10 X 10 the board. If this move is a
winning move then the row 5 should be totally full of the mark at 5,4 OR the
column 4 should be completely full of the mark at 5,4.

Also if the rowNumber == colNumber, then the move is made in a diagonal, hence
we should check diagonals as well.

========================================
Proposed AI Algorithm for Computer Moves
========================================

Current Algorithms Problem
=========================

Currently, the computer moves are calculated by finding out the first empty cell of the board and marking it with the computerâs symbol. This is not the ideal way to make computer moves considering AI.


Suggested Algorithm
===================

Below is the suggested high level approach that can be taken for computing the moves of computer.

#. isMeWinning() : Computer should check on the board if there is any place on the board where he could make a winning move.

#. isOtherWinning() : If he can not make a winning move, he should check if in next chance, someone else can make a winning move, and hence should block that.

Now he needs to make a move which will help in winning, so he will check below :

#. isEntireRowAvailable() : If the entire row is empty or filled by his symbol, then mark there.

#. isEntireColumnAvailable() : If the entire column is empty or filled by his symbol, then mark there.

#. isRightDiagonalAvailable(): If the entire right diagonal is empty or filled by his symbol, then mark there.

#. isLeftDiagonalAvailable(): If the entire left diagonal is empty or filled by his symbol, then mark there.
